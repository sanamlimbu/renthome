// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Manager is an object representing the database table.
type Manager struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	AgencyID  string    `boiler:"agency_id" boil:"agency_id" json:"agency_id" toml:"agency_id" yaml:"agency_id"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *managerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L managerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ManagerColumns = struct {
	ID        string
	AgencyID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	AgencyID:  "agency_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ManagerTableColumns = struct {
	ID        string
	AgencyID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "managers.id",
	AgencyID:  "managers.agency_id",
	CreatedAt: "managers.created_at",
	UpdatedAt: "managers.updated_at",
	DeletedAt: "managers.deleted_at",
}

// Generated where

var ManagerWhere = struct {
	ID        whereHelperstring
	AgencyID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"managers\".\"id\""},
	AgencyID:  whereHelperstring{field: "\"managers\".\"agency_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"managers\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"managers\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"managers\".\"deleted_at\""},
}

// ManagerRels is where relationship names are stored.
var ManagerRels = struct {
	Agency     string
	Properties string
	Users      string
}{
	Agency:     "Agency",
	Properties: "Properties",
	Users:      "Users",
}

// managerR is where relationships are stored.
type managerR struct {
	Agency     *Agency       `boiler:"Agency" boil:"Agency" json:"Agency" toml:"Agency" yaml:"Agency"`
	Properties PropertySlice `boiler:"Properties" boil:"Properties" json:"Properties" toml:"Properties" yaml:"Properties"`
	Users      UserSlice     `boiler:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*managerR) NewStruct() *managerR {
	return &managerR{}
}

func (r *managerR) GetAgency() *Agency {
	if r == nil {
		return nil
	}
	return r.Agency
}

func (r *managerR) GetProperties() PropertySlice {
	if r == nil {
		return nil
	}
	return r.Properties
}

func (r *managerR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// managerL is where Load methods for each relationship are stored.
type managerL struct{}

var (
	managerAllColumns            = []string{"id", "agency_id", "created_at", "updated_at", "deleted_at"}
	managerColumnsWithoutDefault = []string{"agency_id"}
	managerColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	managerPrimaryKeyColumns     = []string{"id"}
	managerGeneratedColumns      = []string{}
)

type (
	// ManagerSlice is an alias for a slice of pointers to Manager.
	// This should almost always be used instead of []Manager.
	ManagerSlice []*Manager
	// ManagerHook is the signature for custom Manager hook methods
	ManagerHook func(boil.Executor, *Manager) error

	managerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	managerType                 = reflect.TypeOf(&Manager{})
	managerMapping              = queries.MakeStructMapping(managerType)
	managerPrimaryKeyMapping, _ = queries.BindMapping(managerType, managerMapping, managerPrimaryKeyColumns)
	managerInsertCacheMut       sync.RWMutex
	managerInsertCache          = make(map[string]insertCache)
	managerUpdateCacheMut       sync.RWMutex
	managerUpdateCache          = make(map[string]updateCache)
	managerUpsertCacheMut       sync.RWMutex
	managerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var managerAfterSelectHooks []ManagerHook

var managerBeforeInsertHooks []ManagerHook
var managerAfterInsertHooks []ManagerHook

var managerBeforeUpdateHooks []ManagerHook
var managerAfterUpdateHooks []ManagerHook

var managerBeforeDeleteHooks []ManagerHook
var managerAfterDeleteHooks []ManagerHook

var managerBeforeUpsertHooks []ManagerHook
var managerAfterUpsertHooks []ManagerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Manager) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range managerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Manager) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range managerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Manager) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range managerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Manager) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range managerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Manager) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range managerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Manager) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range managerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Manager) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range managerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Manager) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range managerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Manager) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range managerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddManagerHook registers your hook function for all future operations.
func AddManagerHook(hookPoint boil.HookPoint, managerHook ManagerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		managerAfterSelectHooks = append(managerAfterSelectHooks, managerHook)
	case boil.BeforeInsertHook:
		managerBeforeInsertHooks = append(managerBeforeInsertHooks, managerHook)
	case boil.AfterInsertHook:
		managerAfterInsertHooks = append(managerAfterInsertHooks, managerHook)
	case boil.BeforeUpdateHook:
		managerBeforeUpdateHooks = append(managerBeforeUpdateHooks, managerHook)
	case boil.AfterUpdateHook:
		managerAfterUpdateHooks = append(managerAfterUpdateHooks, managerHook)
	case boil.BeforeDeleteHook:
		managerBeforeDeleteHooks = append(managerBeforeDeleteHooks, managerHook)
	case boil.AfterDeleteHook:
		managerAfterDeleteHooks = append(managerAfterDeleteHooks, managerHook)
	case boil.BeforeUpsertHook:
		managerBeforeUpsertHooks = append(managerBeforeUpsertHooks, managerHook)
	case boil.AfterUpsertHook:
		managerAfterUpsertHooks = append(managerAfterUpsertHooks, managerHook)
	}
}

// One returns a single manager record from the query.
func (q managerQuery) One(exec boil.Executor) (*Manager, error) {
	o := &Manager{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for managers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Manager records from the query.
func (q managerQuery) All(exec boil.Executor) (ManagerSlice, error) {
	var o []*Manager

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Manager slice")
	}

	if len(managerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Manager records in the query.
func (q managerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count managers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q managerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if managers exists")
	}

	return count > 0, nil
}

// Agency pointed to by the foreign key.
func (o *Manager) Agency(mods ...qm.QueryMod) agencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgencyID),
	}

	queryMods = append(queryMods, mods...)

	return Agencies(queryMods...)
}

// Properties retrieves all the property's Properties with an executor.
func (o *Manager) Properties(mods ...qm.QueryMod) propertyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"properties\".\"manager_id\"=?", o.ID),
	)

	return Properties(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Manager) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"manager_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadAgency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (managerL) LoadAgency(e boil.Executor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		var ok bool
		object, ok = maybeManager.(*Manager)
		if !ok {
			object = new(Manager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManager))
			}
		}
	} else {
		s, ok := maybeManager.(*[]*Manager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManager))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.AgencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.AgencyID {
					continue Outer
				}
			}

			args = append(args, obj.AgencyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agencies`),
		qm.WhereIn(`agencies.id in ?`, args...),
		qmhelper.WhereIsNull(`agencies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agency")
	}

	var resultSlice []*Agency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agencies")
	}

	if len(agencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agency = foreign
		if foreign.R == nil {
			foreign.R = &agencyR{}
		}
		foreign.R.Managers = append(foreign.R.Managers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgencyID == foreign.ID {
				local.R.Agency = foreign
				if foreign.R == nil {
					foreign.R = &agencyR{}
				}
				foreign.R.Managers = append(foreign.R.Managers, local)
				break
			}
		}
	}

	return nil
}

// LoadProperties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadProperties(e boil.Executor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		var ok bool
		object, ok = maybeManager.(*Manager)
		if !ok {
			object = new(Manager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManager))
			}
		}
	} else {
		s, ok := maybeManager.(*[]*Manager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManager))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`properties`),
		qm.WhereIn(`properties.manager_id in ?`, args...),
		qmhelper.WhereIsNull(`properties.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load properties")
	}

	var resultSlice []*Property
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice properties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for properties")
	}

	if len(propertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Properties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &propertyR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManagerID {
				local.R.Properties = append(local.R.Properties, foreign)
				if foreign.R == nil {
					foreign.R = &propertyR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (managerL) LoadUsers(e boil.Executor, singular bool, maybeManager interface{}, mods queries.Applicator) error {
	var slice []*Manager
	var object *Manager

	if singular {
		var ok bool
		object, ok = maybeManager.(*Manager)
		if !ok {
			object = new(Manager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManager))
			}
		}
	} else {
		s, ok := maybeManager.(*[]*Manager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManager))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &managerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &managerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.manager_id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Manager = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ManagerID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Manager = local
				break
			}
		}
	}

	return nil
}

// SetAgency of the manager to the related item.
// Sets o.R.Agency to related.
// Adds o to related.R.Managers.
func (o *Manager) SetAgency(exec boil.Executor, insert bool, related *Agency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"managers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agency_id"}),
		strmangle.WhereClause("\"", "\"", 2, managerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgencyID = related.ID
	if o.R == nil {
		o.R = &managerR{
			Agency: related,
		}
	} else {
		o.R.Agency = related
	}

	if related.R == nil {
		related.R = &agencyR{
			Managers: ManagerSlice{o},
		}
	} else {
		related.R.Managers = append(related.R.Managers, o)
	}

	return nil
}

// AddProperties adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Properties.
// Sets related.R.Manager appropriately.
func (o *Manager) AddProperties(exec boil.Executor, insert bool, related ...*Property) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManagerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"properties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, propertyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManagerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Properties: related,
		}
	} else {
		o.R.Properties = append(o.R.Properties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &propertyR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the manager, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Manager appropriately.
func (o *Manager) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ManagerID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ManagerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &managerR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Manager: o,
			}
		} else {
			rel.R.Manager = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// manager replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Manager's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Manager's Users accordingly.
func (o *Manager) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "update \"users\" set \"manager_id\" = null where \"manager_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.ManagerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Manager = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Manager.
func (o *Manager) RemoveUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ManagerID, nil)
		if rel.R != nil {
			rel.R.Manager = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("manager_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// Managers retrieves all the records using an executor.
func Managers(mods ...qm.QueryMod) managerQuery {
	mods = append(mods, qm.From("\"managers\""), qmhelper.WhereIsNull("\"managers\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"managers\".*"})
	}

	return managerQuery{q}
}

// FindManager retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindManager(exec boil.Executor, iD string, selectCols ...string) (*Manager, error) {
	managerObj := &Manager{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"managers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, managerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from managers")
	}

	if err = managerObj.doAfterSelectHooks(exec); err != nil {
		return managerObj, err
	}

	return managerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Manager) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no managers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(managerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	managerInsertCacheMut.RLock()
	cache, cached := managerInsertCache[key]
	managerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			managerAllColumns,
			managerColumnsWithDefault,
			managerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(managerType, managerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"managers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"managers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into managers")
	}

	if !cached {
		managerInsertCacheMut.Lock()
		managerInsertCache[key] = cache
		managerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Manager.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Manager) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	managerUpdateCacheMut.RLock()
	cache, cached := managerUpdateCache[key]
	managerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			managerAllColumns,
			managerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update managers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"managers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, managerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, append(wl, managerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update managers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for managers")
	}

	if !cached {
		managerUpdateCacheMut.Lock()
		managerUpdateCache[key] = cache
		managerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q managerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for managers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ManagerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"managers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, managerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in manager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all manager")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Manager) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no managers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(managerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	managerUpsertCacheMut.RLock()
	cache, cached := managerUpsertCache[key]
	managerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			managerAllColumns,
			managerColumnsWithDefault,
			managerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			managerAllColumns,
			managerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert managers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(managerPrimaryKeyColumns))
			copy(conflict, managerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"managers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(managerType, managerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(managerType, managerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert managers")
	}

	if !cached {
		managerUpsertCacheMut.Lock()
		managerUpsertCache[key] = cache
		managerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Manager record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Manager) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Manager provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), managerPrimaryKeyMapping)
		sql = "DELETE FROM \"managers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"managers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(managerType, managerMapping, append(wl, managerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for managers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q managerQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no managerQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from managers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for managers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ManagerSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(managerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"managers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, managerPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"managers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, managerPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from manager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for managers")
	}

	if len(managerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Manager) Reload(exec boil.Executor) error {
	ret, err := FindManager(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ManagerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ManagerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), managerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"managers\".* FROM \"managers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, managerPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ManagerSlice")
	}

	*o = slice

	return nil
}

// ManagerExists checks if the Manager row exists.
func ManagerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"managers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if managers exists")
	}

	return exists, nil
}

// Exists checks if the Manager row exists.
func (o *Manager) Exists(exec boil.Executor) (bool, error) {
	return ManagerExists(exec, o.ID)
}
