// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Image is an object representing the database table.
type Image struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Path          string    `boiler:"path" boil:"path" json:"path" toml:"path" yaml:"path"`
	FileSizeBytes int64     `boiler:"file_size_bytes" boil:"file_size_bytes" json:"file_size_bytes" toml:"file_size_bytes" yaml:"file_size_bytes"`
	Extension     string    `boiler:"extension" boil:"extension" json:"extension" toml:"extension" yaml:"extension"`
	PropertyID    string    `boiler:"property_id" boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`
	UploaderID    string    `boiler:"uploader_id" boil:"uploader_id" json:"uploader_id" toml:"uploader_id" yaml:"uploader_id"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *imageR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L imageL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImageColumns = struct {
	ID            string
	Path          string
	FileSizeBytes string
	Extension     string
	PropertyID    string
	UploaderID    string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	Path:          "path",
	FileSizeBytes: "file_size_bytes",
	Extension:     "extension",
	PropertyID:    "property_id",
	UploaderID:    "uploader_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var ImageTableColumns = struct {
	ID            string
	Path          string
	FileSizeBytes string
	Extension     string
	PropertyID    string
	UploaderID    string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "images.id",
	Path:          "images.path",
	FileSizeBytes: "images.file_size_bytes",
	Extension:     "images.extension",
	PropertyID:    "images.property_id",
	UploaderID:    "images.uploader_id",
	CreatedAt:     "images.created_at",
	UpdatedAt:     "images.updated_at",
	DeletedAt:     "images.deleted_at",
}

// Generated where

var ImageWhere = struct {
	ID            whereHelperstring
	Path          whereHelperstring
	FileSizeBytes whereHelperint64
	Extension     whereHelperstring
	PropertyID    whereHelperstring
	UploaderID    whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"images\".\"id\""},
	Path:          whereHelperstring{field: "\"images\".\"path\""},
	FileSizeBytes: whereHelperint64{field: "\"images\".\"file_size_bytes\""},
	Extension:     whereHelperstring{field: "\"images\".\"extension\""},
	PropertyID:    whereHelperstring{field: "\"images\".\"property_id\""},
	UploaderID:    whereHelperstring{field: "\"images\".\"uploader_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"images\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"images\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"images\".\"deleted_at\""},
}

// ImageRels is where relationship names are stored.
var ImageRels = struct {
	Property string
	Uploader string
}{
	Property: "Property",
	Uploader: "Uploader",
}

// imageR is where relationships are stored.
type imageR struct {
	Property *Property `boiler:"Property" boil:"Property" json:"Property" toml:"Property" yaml:"Property"`
	Uploader *User     `boiler:"Uploader" boil:"Uploader" json:"Uploader" toml:"Uploader" yaml:"Uploader"`
}

// NewStruct creates a new relationship struct
func (*imageR) NewStruct() *imageR {
	return &imageR{}
}

func (r *imageR) GetProperty() *Property {
	if r == nil {
		return nil
	}
	return r.Property
}

func (r *imageR) GetUploader() *User {
	if r == nil {
		return nil
	}
	return r.Uploader
}

// imageL is where Load methods for each relationship are stored.
type imageL struct{}

var (
	imageAllColumns            = []string{"id", "path", "file_size_bytes", "extension", "property_id", "uploader_id", "created_at", "updated_at", "deleted_at"}
	imageColumnsWithoutDefault = []string{"path", "file_size_bytes", "extension", "property_id", "uploader_id"}
	imageColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	imagePrimaryKeyColumns     = []string{"id"}
	imageGeneratedColumns      = []string{}
)

type (
	// ImageSlice is an alias for a slice of pointers to Image.
	// This should almost always be used instead of []Image.
	ImageSlice []*Image
	// ImageHook is the signature for custom Image hook methods
	ImageHook func(boil.Executor, *Image) error

	imageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	imageType                 = reflect.TypeOf(&Image{})
	imageMapping              = queries.MakeStructMapping(imageType)
	imagePrimaryKeyMapping, _ = queries.BindMapping(imageType, imageMapping, imagePrimaryKeyColumns)
	imageInsertCacheMut       sync.RWMutex
	imageInsertCache          = make(map[string]insertCache)
	imageUpdateCacheMut       sync.RWMutex
	imageUpdateCache          = make(map[string]updateCache)
	imageUpsertCacheMut       sync.RWMutex
	imageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var imageAfterSelectHooks []ImageHook

var imageBeforeInsertHooks []ImageHook
var imageAfterInsertHooks []ImageHook

var imageBeforeUpdateHooks []ImageHook
var imageAfterUpdateHooks []ImageHook

var imageBeforeDeleteHooks []ImageHook
var imageAfterDeleteHooks []ImageHook

var imageBeforeUpsertHooks []ImageHook
var imageAfterUpsertHooks []ImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Image) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range imageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Image) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Image) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Image) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Image) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Image) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Image) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Image) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Image) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImageHook registers your hook function for all future operations.
func AddImageHook(hookPoint boil.HookPoint, imageHook ImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		imageAfterSelectHooks = append(imageAfterSelectHooks, imageHook)
	case boil.BeforeInsertHook:
		imageBeforeInsertHooks = append(imageBeforeInsertHooks, imageHook)
	case boil.AfterInsertHook:
		imageAfterInsertHooks = append(imageAfterInsertHooks, imageHook)
	case boil.BeforeUpdateHook:
		imageBeforeUpdateHooks = append(imageBeforeUpdateHooks, imageHook)
	case boil.AfterUpdateHook:
		imageAfterUpdateHooks = append(imageAfterUpdateHooks, imageHook)
	case boil.BeforeDeleteHook:
		imageBeforeDeleteHooks = append(imageBeforeDeleteHooks, imageHook)
	case boil.AfterDeleteHook:
		imageAfterDeleteHooks = append(imageAfterDeleteHooks, imageHook)
	case boil.BeforeUpsertHook:
		imageBeforeUpsertHooks = append(imageBeforeUpsertHooks, imageHook)
	case boil.AfterUpsertHook:
		imageAfterUpsertHooks = append(imageAfterUpsertHooks, imageHook)
	}
}

// One returns a single image record from the query.
func (q imageQuery) One(exec boil.Executor) (*Image, error) {
	o := &Image{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for images")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Image records from the query.
func (q imageQuery) All(exec boil.Executor) (ImageSlice, error) {
	var o []*Image

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Image slice")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Image records in the query.
func (q imageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q imageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if images exists")
	}

	return count > 0, nil
}

// Property pointed to by the foreign key.
func (o *Image) Property(mods ...qm.QueryMod) propertyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PropertyID),
	}

	queryMods = append(queryMods, mods...)

	return Properties(queryMods...)
}

// Uploader pointed to by the foreign key.
func (o *Image) Uploader(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UploaderID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadProperty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (imageL) LoadProperty(e boil.Executor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		var ok bool
		object, ok = maybeImage.(*Image)
		if !ok {
			object = new(Image)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImage))
			}
		}
	} else {
		s, ok := maybeImage.(*[]*Image)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.PropertyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if a == obj.PropertyID {
					continue Outer
				}
			}

			args = append(args, obj.PropertyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`properties`),
		qm.WhereIn(`properties.id in ?`, args...),
		qmhelper.WhereIsNull(`properties.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Property")
	}

	var resultSlice []*Property
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Property")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for properties")
	}

	if len(propertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Property = foreign
		if foreign.R == nil {
			foreign.R = &propertyR{}
		}
		foreign.R.Images = append(foreign.R.Images, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PropertyID == foreign.ID {
				local.R.Property = foreign
				if foreign.R == nil {
					foreign.R = &propertyR{}
				}
				foreign.R.Images = append(foreign.R.Images, local)
				break
			}
		}
	}

	return nil
}

// LoadUploader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (imageL) LoadUploader(e boil.Executor, singular bool, maybeImage interface{}, mods queries.Applicator) error {
	var slice []*Image
	var object *Image

	if singular {
		var ok bool
		object, ok = maybeImage.(*Image)
		if !ok {
			object = new(Image)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImage))
			}
		}
	} else {
		s, ok := maybeImage.(*[]*Image)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &imageR{}
		}
		args = append(args, object.UploaderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imageR{}
			}

			for _, a := range args {
				if a == obj.UploaderID {
					continue Outer
				}
			}

			args = append(args, obj.UploaderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Uploader = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UploaderImages = append(foreign.R.UploaderImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UploaderID == foreign.ID {
				local.R.Uploader = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UploaderImages = append(foreign.R.UploaderImages, local)
				break
			}
		}
	}

	return nil
}

// SetProperty of the image to the related item.
// Sets o.R.Property to related.
// Adds o to related.R.Images.
func (o *Image) SetProperty(exec boil.Executor, insert bool, related *Property) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"property_id"}),
		strmangle.WhereClause("\"", "\"", 2, imagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PropertyID = related.ID
	if o.R == nil {
		o.R = &imageR{
			Property: related,
		}
	} else {
		o.R.Property = related
	}

	if related.R == nil {
		related.R = &propertyR{
			Images: ImageSlice{o},
		}
	} else {
		related.R.Images = append(related.R.Images, o)
	}

	return nil
}

// SetUploader of the image to the related item.
// Sets o.R.Uploader to related.
// Adds o to related.R.UploaderImages.
func (o *Image) SetUploader(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"uploader_id"}),
		strmangle.WhereClause("\"", "\"", 2, imagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UploaderID = related.ID
	if o.R == nil {
		o.R = &imageR{
			Uploader: related,
		}
	} else {
		o.R.Uploader = related
	}

	if related.R == nil {
		related.R = &userR{
			UploaderImages: ImageSlice{o},
		}
	} else {
		related.R.UploaderImages = append(related.R.UploaderImages, o)
	}

	return nil
}

// Images retrieves all the records using an executor.
func Images(mods ...qm.QueryMod) imageQuery {
	mods = append(mods, qm.From("\"images\""), qmhelper.WhereIsNull("\"images\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"images\".*"})
	}

	return imageQuery{q}
}

// FindImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImage(exec boil.Executor, iD string, selectCols ...string) (*Image, error) {
	imageObj := &Image{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"images\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, imageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from images")
	}

	if err = imageObj.doAfterSelectHooks(exec); err != nil {
		return imageObj, err
	}

	return imageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Image) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no images provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	imageInsertCacheMut.RLock()
	cache, cached := imageInsertCache[key]
	imageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			imageAllColumns,
			imageColumnsWithDefault,
			imageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(imageType, imageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into images")
	}

	if !cached {
		imageInsertCacheMut.Lock()
		imageInsertCache[key] = cache
		imageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Image.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Image) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	imageUpdateCacheMut.RLock()
	cache, cached := imageUpdateCache[key]
	imageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, imagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, append(wl, imagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for images")
	}

	if !cached {
		imageUpdateCacheMut.Lock()
		imageUpdateCache[key] = cache
		imageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q imageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, imagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in image slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all image")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Image) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no images provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	imageUpsertCacheMut.RLock()
	cache, cached := imageUpsertCache[key]
	imageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			imageAllColumns,
			imageColumnsWithDefault,
			imageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert images, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(imagePrimaryKeyColumns))
			copy(conflict, imagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"images\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(imageType, imageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(imageType, imageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert images")
	}

	if !cached {
		imageUpsertCacheMut.Lock()
		imageUpsertCache[key] = cache
		imageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Image record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Image) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Image provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), imagePrimaryKeyMapping)
		sql = "DELETE FROM \"images\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"images\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(imageType, imageMapping, append(wl, imagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for images")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q imageQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no imageQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImageSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(imageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"images\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imagePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"images\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, imagePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from image slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for images")
	}

	if len(imageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Image) Reload(exec boil.Executor) error {
	ret, err := FindImage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"images\".* FROM \"images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imagePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ImageSlice")
	}

	*o = slice

	return nil
}

// ImageExists checks if the Image row exists.
func ImageExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"images\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if images exists")
	}

	return exists, nil
}

// Exists checks if the Image row exists.
func (o *Image) Exists(exec boil.Executor) (bool, error) {
	return ImageExists(exec, o.ID)
}
