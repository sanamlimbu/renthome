// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IssueToken is an object representing the database table.
type IssueToken struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      string    `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Device      string    `boiler:"device" boil:"device" json:"device" toml:"device" yaml:"device"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ExpiresAt   time.Time `boiler:"expires_at" boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	Blacklisted bool      `boiler:"blacklisted" boil:"blacklisted" json:"blacklisted" toml:"blacklisted" yaml:"blacklisted"`

	R *issueTokenR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L issueTokenL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IssueTokenColumns = struct {
	ID          string
	UserID      string
	Device      string
	CreatedAt   string
	ExpiresAt   string
	Blacklisted string
}{
	ID:          "id",
	UserID:      "user_id",
	Device:      "device",
	CreatedAt:   "created_at",
	ExpiresAt:   "expires_at",
	Blacklisted: "blacklisted",
}

var IssueTokenTableColumns = struct {
	ID          string
	UserID      string
	Device      string
	CreatedAt   string
	ExpiresAt   string
	Blacklisted string
}{
	ID:          "issue_tokens.id",
	UserID:      "issue_tokens.user_id",
	Device:      "issue_tokens.device",
	CreatedAt:   "issue_tokens.created_at",
	ExpiresAt:   "issue_tokens.expires_at",
	Blacklisted: "issue_tokens.blacklisted",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var IssueTokenWhere = struct {
	ID          whereHelperstring
	UserID      whereHelperstring
	Device      whereHelperstring
	CreatedAt   whereHelpertime_Time
	ExpiresAt   whereHelpertime_Time
	Blacklisted whereHelperbool
}{
	ID:          whereHelperstring{field: "\"issue_tokens\".\"id\""},
	UserID:      whereHelperstring{field: "\"issue_tokens\".\"user_id\""},
	Device:      whereHelperstring{field: "\"issue_tokens\".\"device\""},
	CreatedAt:   whereHelpertime_Time{field: "\"issue_tokens\".\"created_at\""},
	ExpiresAt:   whereHelpertime_Time{field: "\"issue_tokens\".\"expires_at\""},
	Blacklisted: whereHelperbool{field: "\"issue_tokens\".\"blacklisted\""},
}

// IssueTokenRels is where relationship names are stored.
var IssueTokenRels = struct {
	User string
}{
	User: "User",
}

// issueTokenR is where relationships are stored.
type issueTokenR struct {
	User *User `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*issueTokenR) NewStruct() *issueTokenR {
	return &issueTokenR{}
}

func (r *issueTokenR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// issueTokenL is where Load methods for each relationship are stored.
type issueTokenL struct{}

var (
	issueTokenAllColumns            = []string{"id", "user_id", "device", "created_at", "expires_at", "blacklisted"}
	issueTokenColumnsWithoutDefault = []string{"user_id", "device", "expires_at"}
	issueTokenColumnsWithDefault    = []string{"id", "created_at", "blacklisted"}
	issueTokenPrimaryKeyColumns     = []string{"id"}
	issueTokenGeneratedColumns      = []string{}
)

type (
	// IssueTokenSlice is an alias for a slice of pointers to IssueToken.
	// This should almost always be used instead of []IssueToken.
	IssueTokenSlice []*IssueToken
	// IssueTokenHook is the signature for custom IssueToken hook methods
	IssueTokenHook func(boil.Executor, *IssueToken) error

	issueTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	issueTokenType                 = reflect.TypeOf(&IssueToken{})
	issueTokenMapping              = queries.MakeStructMapping(issueTokenType)
	issueTokenPrimaryKeyMapping, _ = queries.BindMapping(issueTokenType, issueTokenMapping, issueTokenPrimaryKeyColumns)
	issueTokenInsertCacheMut       sync.RWMutex
	issueTokenInsertCache          = make(map[string]insertCache)
	issueTokenUpdateCacheMut       sync.RWMutex
	issueTokenUpdateCache          = make(map[string]updateCache)
	issueTokenUpsertCacheMut       sync.RWMutex
	issueTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var issueTokenAfterSelectHooks []IssueTokenHook

var issueTokenBeforeInsertHooks []IssueTokenHook
var issueTokenAfterInsertHooks []IssueTokenHook

var issueTokenBeforeUpdateHooks []IssueTokenHook
var issueTokenAfterUpdateHooks []IssueTokenHook

var issueTokenBeforeDeleteHooks []IssueTokenHook
var issueTokenAfterDeleteHooks []IssueTokenHook

var issueTokenBeforeUpsertHooks []IssueTokenHook
var issueTokenAfterUpsertHooks []IssueTokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IssueToken) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IssueToken) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IssueToken) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IssueToken) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IssueToken) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IssueToken) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IssueToken) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IssueToken) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IssueToken) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range issueTokenAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIssueTokenHook registers your hook function for all future operations.
func AddIssueTokenHook(hookPoint boil.HookPoint, issueTokenHook IssueTokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		issueTokenAfterSelectHooks = append(issueTokenAfterSelectHooks, issueTokenHook)
	case boil.BeforeInsertHook:
		issueTokenBeforeInsertHooks = append(issueTokenBeforeInsertHooks, issueTokenHook)
	case boil.AfterInsertHook:
		issueTokenAfterInsertHooks = append(issueTokenAfterInsertHooks, issueTokenHook)
	case boil.BeforeUpdateHook:
		issueTokenBeforeUpdateHooks = append(issueTokenBeforeUpdateHooks, issueTokenHook)
	case boil.AfterUpdateHook:
		issueTokenAfterUpdateHooks = append(issueTokenAfterUpdateHooks, issueTokenHook)
	case boil.BeforeDeleteHook:
		issueTokenBeforeDeleteHooks = append(issueTokenBeforeDeleteHooks, issueTokenHook)
	case boil.AfterDeleteHook:
		issueTokenAfterDeleteHooks = append(issueTokenAfterDeleteHooks, issueTokenHook)
	case boil.BeforeUpsertHook:
		issueTokenBeforeUpsertHooks = append(issueTokenBeforeUpsertHooks, issueTokenHook)
	case boil.AfterUpsertHook:
		issueTokenAfterUpsertHooks = append(issueTokenAfterUpsertHooks, issueTokenHook)
	}
}

// One returns a single issueToken record from the query.
func (q issueTokenQuery) One(exec boil.Executor) (*IssueToken, error) {
	o := &IssueToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for issue_tokens")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IssueToken records from the query.
func (q issueTokenQuery) All(exec boil.Executor) (IssueTokenSlice, error) {
	var o []*IssueToken

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to IssueToken slice")
	}

	if len(issueTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IssueToken records in the query.
func (q issueTokenQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count issue_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q issueTokenQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if issue_tokens exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *IssueToken) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (issueTokenL) LoadUser(e boil.Executor, singular bool, maybeIssueToken interface{}, mods queries.Applicator) error {
	var slice []*IssueToken
	var object *IssueToken

	if singular {
		var ok bool
		object, ok = maybeIssueToken.(*IssueToken)
		if !ok {
			object = new(IssueToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIssueToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIssueToken))
			}
		}
	} else {
		s, ok := maybeIssueToken.(*[]*IssueToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIssueToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIssueToken))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &issueTokenR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &issueTokenR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IssueTokens = append(foreign.R.IssueTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IssueTokens = append(foreign.R.IssueTokens, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the issueToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.IssueTokens.
func (o *IssueToken) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"issue_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, issueTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &issueTokenR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			IssueTokens: IssueTokenSlice{o},
		}
	} else {
		related.R.IssueTokens = append(related.R.IssueTokens, o)
	}

	return nil
}

// IssueTokens retrieves all the records using an executor.
func IssueTokens(mods ...qm.QueryMod) issueTokenQuery {
	mods = append(mods, qm.From("\"issue_tokens\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"issue_tokens\".*"})
	}

	return issueTokenQuery{q}
}

// FindIssueToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIssueToken(exec boil.Executor, iD string, selectCols ...string) (*IssueToken, error) {
	issueTokenObj := &IssueToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"issue_tokens\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, issueTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from issue_tokens")
	}

	if err = issueTokenObj.doAfterSelectHooks(exec); err != nil {
		return issueTokenObj, err
	}

	return issueTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IssueToken) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no issue_tokens provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(issueTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	issueTokenInsertCacheMut.RLock()
	cache, cached := issueTokenInsertCache[key]
	issueTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			issueTokenAllColumns,
			issueTokenColumnsWithDefault,
			issueTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(issueTokenType, issueTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(issueTokenType, issueTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"issue_tokens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"issue_tokens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into issue_tokens")
	}

	if !cached {
		issueTokenInsertCacheMut.Lock()
		issueTokenInsertCache[key] = cache
		issueTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the IssueToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IssueToken) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	issueTokenUpdateCacheMut.RLock()
	cache, cached := issueTokenUpdateCache[key]
	issueTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			issueTokenAllColumns,
			issueTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update issue_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"issue_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, issueTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(issueTokenType, issueTokenMapping, append(wl, issueTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update issue_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for issue_tokens")
	}

	if !cached {
		issueTokenUpdateCacheMut.Lock()
		issueTokenUpdateCache[key] = cache
		issueTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q issueTokenQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for issue_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for issue_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IssueTokenSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"issue_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, issueTokenPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in issueToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all issueToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IssueToken) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no issue_tokens provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(issueTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	issueTokenUpsertCacheMut.RLock()
	cache, cached := issueTokenUpsertCache[key]
	issueTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			issueTokenAllColumns,
			issueTokenColumnsWithDefault,
			issueTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			issueTokenAllColumns,
			issueTokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert issue_tokens, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(issueTokenPrimaryKeyColumns))
			copy(conflict, issueTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"issue_tokens\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(issueTokenType, issueTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(issueTokenType, issueTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert issue_tokens")
	}

	if !cached {
		issueTokenUpsertCacheMut.Lock()
		issueTokenUpsertCache[key] = cache
		issueTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single IssueToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IssueToken) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no IssueToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), issueTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"issue_tokens\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from issue_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for issue_tokens")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q issueTokenQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no issueTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from issue_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for issue_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IssueTokenSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(issueTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"issue_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, issueTokenPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from issueToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for issue_tokens")
	}

	if len(issueTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IssueToken) Reload(exec boil.Executor) error {
	ret, err := FindIssueToken(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IssueTokenSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IssueTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"issue_tokens\".* FROM \"issue_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, issueTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in IssueTokenSlice")
	}

	*o = slice

	return nil
}

// IssueTokenExists checks if the IssueToken row exists.
func IssueTokenExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"issue_tokens\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if issue_tokens exists")
	}

	return exists, nil
}

// Exists checks if the IssueToken row exists.
func (o *IssueToken) Exists(exec boil.Executor) (bool, error) {
	return IssueTokenExists(exec, o.ID)
}
