// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Property is an object representing the database table.
type Property struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug             string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Type             string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	Category         string      `boiler:"category" boil:"category" json:"category" toml:"category" yaml:"category"`
	Street           string      `boiler:"street" boil:"street" json:"street" toml:"street" yaml:"street"`
	Suburb           string      `boiler:"suburb" boil:"suburb" json:"suburb" toml:"suburb" yaml:"suburb"`
	Postcode         string      `boiler:"postcode" boil:"postcode" json:"postcode" toml:"postcode" yaml:"postcode"`
	State            string      `boiler:"state" boil:"state" json:"state" toml:"state" yaml:"state"`
	Location         string      `boiler:"location" boil:"location" json:"location" toml:"location" yaml:"location"`
	BedCount         int         `boiler:"bed_count" boil:"bed_count" json:"bed_count" toml:"bed_count" yaml:"bed_count"`
	BathCount        int         `boiler:"bath_count" boil:"bath_count" json:"bath_count" toml:"bath_count" yaml:"bath_count"`
	CarCount         int         `boiler:"car_count" boil:"car_count" json:"car_count" toml:"car_count" yaml:"car_count"`
	HasAircon        bool        `boiler:"has_aircon" boil:"has_aircon" json:"has_aircon" toml:"has_aircon" yaml:"has_aircon"`
	HasDishwasher    bool        `boiler:"has_dishwasher" boil:"has_dishwasher" json:"has_dishwasher" toml:"has_dishwasher" yaml:"has_dishwasher"`
	IsFurnished      bool        `boiler:"is_furnished" boil:"is_furnished" json:"is_furnished" toml:"is_furnished" yaml:"is_furnished"`
	IsPetsConsidered bool        `boiler:"is_pets_considered" boil:"is_pets_considered" json:"is_pets_considered" toml:"is_pets_considered" yaml:"is_pets_considered"`
	AvailableAt      null.Time   `boiler:"available_at" boil:"available_at" json:"available_at,omitempty" toml:"available_at" yaml:"available_at,omitempty"`
	IsAvailableNow   bool        `boiler:"is_available_now" boil:"is_available_now" json:"is_available_now" toml:"is_available_now" yaml:"is_available_now"`
	OpenAt           null.Time   `boiler:"open_at" boil:"open_at" json:"open_at,omitempty" toml:"open_at" yaml:"open_at,omitempty"`
	Price            int         `boiler:"price" boil:"price" json:"price" toml:"price" yaml:"price"`
	AgencyID         string      `boiler:"agency_id" boil:"agency_id" json:"agency_id" toml:"agency_id" yaml:"agency_id"`
	ManagerID        string      `boiler:"manager_id" boil:"manager_id" json:"manager_id" toml:"manager_id" yaml:"manager_id"`
	Keywords         null.String `boiler:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *propertyR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L propertyL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PropertyColumns = struct {
	ID               string
	Slug             string
	Type             string
	Category         string
	Street           string
	Suburb           string
	Postcode         string
	State            string
	Location         string
	BedCount         string
	BathCount        string
	CarCount         string
	HasAircon        string
	HasDishwasher    string
	IsFurnished      string
	IsPetsConsidered string
	AvailableAt      string
	IsAvailableNow   string
	OpenAt           string
	Price            string
	AgencyID         string
	ManagerID        string
	Keywords         string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	Slug:             "slug",
	Type:             "type",
	Category:         "category",
	Street:           "street",
	Suburb:           "suburb",
	Postcode:         "postcode",
	State:            "state",
	Location:         "location",
	BedCount:         "bed_count",
	BathCount:        "bath_count",
	CarCount:         "car_count",
	HasAircon:        "has_aircon",
	HasDishwasher:    "has_dishwasher",
	IsFurnished:      "is_furnished",
	IsPetsConsidered: "is_pets_considered",
	AvailableAt:      "available_at",
	IsAvailableNow:   "is_available_now",
	OpenAt:           "open_at",
	Price:            "price",
	AgencyID:         "agency_id",
	ManagerID:        "manager_id",
	Keywords:         "keywords",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var PropertyTableColumns = struct {
	ID               string
	Slug             string
	Type             string
	Category         string
	Street           string
	Suburb           string
	Postcode         string
	State            string
	Location         string
	BedCount         string
	BathCount        string
	CarCount         string
	HasAircon        string
	HasDishwasher    string
	IsFurnished      string
	IsPetsConsidered string
	AvailableAt      string
	IsAvailableNow   string
	OpenAt           string
	Price            string
	AgencyID         string
	ManagerID        string
	Keywords         string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "properties.id",
	Slug:             "properties.slug",
	Type:             "properties.type",
	Category:         "properties.category",
	Street:           "properties.street",
	Suburb:           "properties.suburb",
	Postcode:         "properties.postcode",
	State:            "properties.state",
	Location:         "properties.location",
	BedCount:         "properties.bed_count",
	BathCount:        "properties.bath_count",
	CarCount:         "properties.car_count",
	HasAircon:        "properties.has_aircon",
	HasDishwasher:    "properties.has_dishwasher",
	IsFurnished:      "properties.is_furnished",
	IsPetsConsidered: "properties.is_pets_considered",
	AvailableAt:      "properties.available_at",
	IsAvailableNow:   "properties.is_available_now",
	OpenAt:           "properties.open_at",
	Price:            "properties.price",
	AgencyID:         "properties.agency_id",
	ManagerID:        "properties.manager_id",
	Keywords:         "properties.keywords",
	CreatedAt:        "properties.created_at",
	UpdatedAt:        "properties.updated_at",
	DeletedAt:        "properties.deleted_at",
}

// Generated where

var PropertyWhere = struct {
	ID               whereHelperstring
	Slug             whereHelperstring
	Type             whereHelperstring
	Category         whereHelperstring
	Street           whereHelperstring
	Suburb           whereHelperstring
	Postcode         whereHelperstring
	State            whereHelperstring
	Location         whereHelperstring
	BedCount         whereHelperint
	BathCount        whereHelperint
	CarCount         whereHelperint
	HasAircon        whereHelperbool
	HasDishwasher    whereHelperbool
	IsFurnished      whereHelperbool
	IsPetsConsidered whereHelperbool
	AvailableAt      whereHelpernull_Time
	IsAvailableNow   whereHelperbool
	OpenAt           whereHelpernull_Time
	Price            whereHelperint
	AgencyID         whereHelperstring
	ManagerID        whereHelperstring
	Keywords         whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"properties\".\"id\""},
	Slug:             whereHelperstring{field: "\"properties\".\"slug\""},
	Type:             whereHelperstring{field: "\"properties\".\"type\""},
	Category:         whereHelperstring{field: "\"properties\".\"category\""},
	Street:           whereHelperstring{field: "\"properties\".\"street\""},
	Suburb:           whereHelperstring{field: "\"properties\".\"suburb\""},
	Postcode:         whereHelperstring{field: "\"properties\".\"postcode\""},
	State:            whereHelperstring{field: "\"properties\".\"state\""},
	Location:         whereHelperstring{field: "\"properties\".\"location\""},
	BedCount:         whereHelperint{field: "\"properties\".\"bed_count\""},
	BathCount:        whereHelperint{field: "\"properties\".\"bath_count\""},
	CarCount:         whereHelperint{field: "\"properties\".\"car_count\""},
	HasAircon:        whereHelperbool{field: "\"properties\".\"has_aircon\""},
	HasDishwasher:    whereHelperbool{field: "\"properties\".\"has_dishwasher\""},
	IsFurnished:      whereHelperbool{field: "\"properties\".\"is_furnished\""},
	IsPetsConsidered: whereHelperbool{field: "\"properties\".\"is_pets_considered\""},
	AvailableAt:      whereHelpernull_Time{field: "\"properties\".\"available_at\""},
	IsAvailableNow:   whereHelperbool{field: "\"properties\".\"is_available_now\""},
	OpenAt:           whereHelpernull_Time{field: "\"properties\".\"open_at\""},
	Price:            whereHelperint{field: "\"properties\".\"price\""},
	AgencyID:         whereHelperstring{field: "\"properties\".\"agency_id\""},
	ManagerID:        whereHelperstring{field: "\"properties\".\"manager_id\""},
	Keywords:         whereHelpernull_String{field: "\"properties\".\"keywords\""},
	CreatedAt:        whereHelpertime_Time{field: "\"properties\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"properties\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"properties\".\"deleted_at\""},
}

// PropertyRels is where relationship names are stored.
var PropertyRels = struct {
	Agency  string
	Manager string
	Images  string
	Blobs   string
}{
	Agency:  "Agency",
	Manager: "Manager",
	Images:  "Images",
	Blobs:   "Blobs",
}

// propertyR is where relationships are stored.
type propertyR struct {
	Agency  *Agency    `boiler:"Agency" boil:"Agency" json:"Agency" toml:"Agency" yaml:"Agency"`
	Manager *User      `boiler:"Manager" boil:"Manager" json:"Manager" toml:"Manager" yaml:"Manager"`
	Images  ImageSlice `boiler:"Images" boil:"Images" json:"Images" toml:"Images" yaml:"Images"`
	Blobs   BlobSlice  `boiler:"Blobs" boil:"Blobs" json:"Blobs" toml:"Blobs" yaml:"Blobs"`
}

// NewStruct creates a new relationship struct
func (*propertyR) NewStruct() *propertyR {
	return &propertyR{}
}

func (r *propertyR) GetAgency() *Agency {
	if r == nil {
		return nil
	}
	return r.Agency
}

func (r *propertyR) GetManager() *User {
	if r == nil {
		return nil
	}
	return r.Manager
}

func (r *propertyR) GetImages() ImageSlice {
	if r == nil {
		return nil
	}
	return r.Images
}

func (r *propertyR) GetBlobs() BlobSlice {
	if r == nil {
		return nil
	}
	return r.Blobs
}

// propertyL is where Load methods for each relationship are stored.
type propertyL struct{}

var (
	propertyAllColumns            = []string{"id", "slug", "type", "category", "street", "suburb", "postcode", "state", "location", "bed_count", "bath_count", "car_count", "has_aircon", "has_dishwasher", "is_furnished", "is_pets_considered", "available_at", "is_available_now", "open_at", "price", "agency_id", "manager_id", "keywords", "created_at", "updated_at", "deleted_at"}
	propertyColumnsWithoutDefault = []string{"slug", "type", "category", "street", "suburb", "postcode", "state", "location", "bed_count", "bath_count", "car_count", "price", "agency_id", "manager_id"}
	propertyColumnsWithDefault    = []string{"id", "has_aircon", "has_dishwasher", "is_furnished", "is_pets_considered", "available_at", "is_available_now", "open_at", "keywords", "created_at", "updated_at", "deleted_at"}
	propertyPrimaryKeyColumns     = []string{"id"}
	propertyGeneratedColumns      = []string{}
)

type (
	// PropertySlice is an alias for a slice of pointers to Property.
	// This should almost always be used instead of []Property.
	PropertySlice []*Property
	// PropertyHook is the signature for custom Property hook methods
	PropertyHook func(boil.Executor, *Property) error

	propertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	propertyType                 = reflect.TypeOf(&Property{})
	propertyMapping              = queries.MakeStructMapping(propertyType)
	propertyPrimaryKeyMapping, _ = queries.BindMapping(propertyType, propertyMapping, propertyPrimaryKeyColumns)
	propertyInsertCacheMut       sync.RWMutex
	propertyInsertCache          = make(map[string]insertCache)
	propertyUpdateCacheMut       sync.RWMutex
	propertyUpdateCache          = make(map[string]updateCache)
	propertyUpsertCacheMut       sync.RWMutex
	propertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var propertyAfterSelectHooks []PropertyHook

var propertyBeforeInsertHooks []PropertyHook
var propertyAfterInsertHooks []PropertyHook

var propertyBeforeUpdateHooks []PropertyHook
var propertyAfterUpdateHooks []PropertyHook

var propertyBeforeDeleteHooks []PropertyHook
var propertyAfterDeleteHooks []PropertyHook

var propertyBeforeUpsertHooks []PropertyHook
var propertyAfterUpsertHooks []PropertyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Property) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Property) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Property) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Property) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Property) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Property) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Property) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Property) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Property) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range propertyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPropertyHook registers your hook function for all future operations.
func AddPropertyHook(hookPoint boil.HookPoint, propertyHook PropertyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		propertyAfterSelectHooks = append(propertyAfterSelectHooks, propertyHook)
	case boil.BeforeInsertHook:
		propertyBeforeInsertHooks = append(propertyBeforeInsertHooks, propertyHook)
	case boil.AfterInsertHook:
		propertyAfterInsertHooks = append(propertyAfterInsertHooks, propertyHook)
	case boil.BeforeUpdateHook:
		propertyBeforeUpdateHooks = append(propertyBeforeUpdateHooks, propertyHook)
	case boil.AfterUpdateHook:
		propertyAfterUpdateHooks = append(propertyAfterUpdateHooks, propertyHook)
	case boil.BeforeDeleteHook:
		propertyBeforeDeleteHooks = append(propertyBeforeDeleteHooks, propertyHook)
	case boil.AfterDeleteHook:
		propertyAfterDeleteHooks = append(propertyAfterDeleteHooks, propertyHook)
	case boil.BeforeUpsertHook:
		propertyBeforeUpsertHooks = append(propertyBeforeUpsertHooks, propertyHook)
	case boil.AfterUpsertHook:
		propertyAfterUpsertHooks = append(propertyAfterUpsertHooks, propertyHook)
	}
}

// One returns a single property record from the query.
func (q propertyQuery) One(exec boil.Executor) (*Property, error) {
	o := &Property{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for properties")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Property records from the query.
func (q propertyQuery) All(exec boil.Executor) (PropertySlice, error) {
	var o []*Property

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Property slice")
	}

	if len(propertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Property records in the query.
func (q propertyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q propertyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if properties exists")
	}

	return count > 0, nil
}

// Agency pointed to by the foreign key.
func (o *Property) Agency(mods ...qm.QueryMod) agencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgencyID),
	}

	queryMods = append(queryMods, mods...)

	return Agencies(queryMods...)
}

// Manager pointed to by the foreign key.
func (o *Property) Manager(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ManagerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Images retrieves all the image's Images with an executor.
func (o *Property) Images(mods ...qm.QueryMod) imageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"images\".\"property_id\"=?", o.ID),
	)

	return Images(queryMods...)
}

// Blobs retrieves all the blob's Blobs with an executor.
func (o *Property) Blobs(mods ...qm.QueryMod) blobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"property_blobs\" on \"blobs\".\"id\" = \"property_blobs\".\"blob_id\""),
		qm.Where("\"property_blobs\".\"property_id\"=?", o.ID),
	)

	return Blobs(queryMods...)
}

// LoadAgency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (propertyL) LoadAgency(e boil.Executor, singular bool, maybeProperty interface{}, mods queries.Applicator) error {
	var slice []*Property
	var object *Property

	if singular {
		var ok bool
		object, ok = maybeProperty.(*Property)
		if !ok {
			object = new(Property)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProperty))
			}
		}
	} else {
		s, ok := maybeProperty.(*[]*Property)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProperty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &propertyR{}
		}
		args = append(args, object.AgencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &propertyR{}
			}

			for _, a := range args {
				if a == obj.AgencyID {
					continue Outer
				}
			}

			args = append(args, obj.AgencyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agencies`),
		qm.WhereIn(`agencies.id in ?`, args...),
		qmhelper.WhereIsNull(`agencies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agency")
	}

	var resultSlice []*Agency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agencies")
	}

	if len(agencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agency = foreign
		if foreign.R == nil {
			foreign.R = &agencyR{}
		}
		foreign.R.Properties = append(foreign.R.Properties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgencyID == foreign.ID {
				local.R.Agency = foreign
				if foreign.R == nil {
					foreign.R = &agencyR{}
				}
				foreign.R.Properties = append(foreign.R.Properties, local)
				break
			}
		}
	}

	return nil
}

// LoadManager allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (propertyL) LoadManager(e boil.Executor, singular bool, maybeProperty interface{}, mods queries.Applicator) error {
	var slice []*Property
	var object *Property

	if singular {
		var ok bool
		object, ok = maybeProperty.(*Property)
		if !ok {
			object = new(Property)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProperty))
			}
		}
	} else {
		s, ok := maybeProperty.(*[]*Property)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProperty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &propertyR{}
		}
		args = append(args, object.ManagerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &propertyR{}
			}

			for _, a := range args {
				if a == obj.ManagerID {
					continue Outer
				}
			}

			args = append(args, obj.ManagerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manager = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ManagerProperties = append(foreign.R.ManagerProperties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManagerID == foreign.ID {
				local.R.Manager = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ManagerProperties = append(foreign.R.ManagerProperties, local)
				break
			}
		}
	}

	return nil
}

// LoadImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (propertyL) LoadImages(e boil.Executor, singular bool, maybeProperty interface{}, mods queries.Applicator) error {
	var slice []*Property
	var object *Property

	if singular {
		var ok bool
		object, ok = maybeProperty.(*Property)
		if !ok {
			object = new(Property)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProperty))
			}
		}
	} else {
		s, ok := maybeProperty.(*[]*Property)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProperty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &propertyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &propertyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.property_id in ?`, args...),
		qmhelper.WhereIsNull(`images.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load images")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Images = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imageR{}
			}
			foreign.R.Property = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PropertyID {
				local.R.Images = append(local.R.Images, foreign)
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Property = local
				break
			}
		}
	}

	return nil
}

// LoadBlobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (propertyL) LoadBlobs(e boil.Executor, singular bool, maybeProperty interface{}, mods queries.Applicator) error {
	var slice []*Property
	var object *Property

	if singular {
		var ok bool
		object, ok = maybeProperty.(*Property)
		if !ok {
			object = new(Property)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProperty))
			}
		}
	} else {
		s, ok := maybeProperty.(*[]*Property)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProperty)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProperty))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &propertyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &propertyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"blobs\".\"id\", \"blobs\".\"file_name\", \"blobs\".\"mime_type\", \"blobs\".\"file_size_bytes\", \"blobs\".\"extension\", \"blobs\".\"file\", \"blobs\".\"views\", \"blobs\".\"hash\", \"blobs\".\"public\", \"blobs\".\"created_at\", \"blobs\".\"updated_at\", \"blobs\".\"deleted_at\", \"a\".\"property_id\""),
		qm.From("\"blobs\""),
		qm.InnerJoin("\"property_blobs\" as \"a\" on \"blobs\".\"id\" = \"a\".\"blob_id\""),
		qm.WhereIn("\"a\".\"property_id\" in ?", args...),
		qmhelper.WhereIsNull("\"blobs\".\"deleted_at\""),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blobs")
	}

	var resultSlice []*Blob

	var localJoinCols []string
	for results.Next() {
		one := new(Blob)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.FileName, &one.MimeType, &one.FileSizeBytes, &one.Extension, &one.File, &one.Views, &one.Hash, &one.Public, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for blobs")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice blobs")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(blobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Blobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blobR{}
			}
			foreign.R.Properties = append(foreign.R.Properties, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Blobs = append(local.R.Blobs, foreign)
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.Properties = append(foreign.R.Properties, local)
				break
			}
		}
	}

	return nil
}

// SetAgency of the property to the related item.
// Sets o.R.Agency to related.
// Adds o to related.R.Properties.
func (o *Property) SetAgency(exec boil.Executor, insert bool, related *Agency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agency_id"}),
		strmangle.WhereClause("\"", "\"", 2, propertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgencyID = related.ID
	if o.R == nil {
		o.R = &propertyR{
			Agency: related,
		}
	} else {
		o.R.Agency = related
	}

	if related.R == nil {
		related.R = &agencyR{
			Properties: PropertySlice{o},
		}
	} else {
		related.R.Properties = append(related.R.Properties, o)
	}

	return nil
}

// SetManager of the property to the related item.
// Sets o.R.Manager to related.
// Adds o to related.R.ManagerProperties.
func (o *Property) SetManager(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"manager_id"}),
		strmangle.WhereClause("\"", "\"", 2, propertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManagerID = related.ID
	if o.R == nil {
		o.R = &propertyR{
			Manager: related,
		}
	} else {
		o.R.Manager = related
	}

	if related.R == nil {
		related.R = &userR{
			ManagerProperties: PropertySlice{o},
		}
	} else {
		related.R.ManagerProperties = append(related.R.ManagerProperties, o)
	}

	return nil
}

// AddImages adds the given related objects to the existing relationships
// of the property, optionally inserting them as new records.
// Appends related to o.R.Images.
// Sets related.R.Property appropriately.
func (o *Property) AddImages(exec boil.Executor, insert bool, related ...*Image) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PropertyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"property_id"}),
				strmangle.WhereClause("\"", "\"", 2, imagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PropertyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &propertyR{
			Images: related,
		}
	} else {
		o.R.Images = append(o.R.Images, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imageR{
				Property: o,
			}
		} else {
			rel.R.Property = o
		}
	}
	return nil
}

// AddBlobs adds the given related objects to the existing relationships
// of the property, optionally inserting them as new records.
// Appends related to o.R.Blobs.
// Sets related.R.Properties appropriately.
func (o *Property) AddBlobs(exec boil.Executor, insert bool, related ...*Blob) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"property_blobs\" (\"property_id\", \"blob_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &propertyR{
			Blobs: related,
		}
	} else {
		o.R.Blobs = append(o.R.Blobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blobR{
				Properties: PropertySlice{o},
			}
		} else {
			rel.R.Properties = append(rel.R.Properties, o)
		}
	}
	return nil
}

// SetBlobs removes all previously related items of the
// property replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Properties's Blobs accordingly.
// Replaces o.R.Blobs with related.
// Sets related.R.Properties's Blobs accordingly.
func (o *Property) SetBlobs(exec boil.Executor, insert bool, related ...*Blob) error {
	query := "delete from \"property_blobs\" where \"property_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBlobsFromPropertiesSlice(o, related)
	if o.R != nil {
		o.R.Blobs = nil
	}

	return o.AddBlobs(exec, insert, related...)
}

// RemoveBlobs relationships from objects passed in.
// Removes related items from R.Blobs (uses pointer comparison, removal does not keep order)
// Sets related.R.Properties.
func (o *Property) RemoveBlobs(exec boil.Executor, related ...*Blob) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"property_blobs\" where \"property_id\" = $1 and \"blob_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBlobsFromPropertiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Blobs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Blobs)
			if ln > 1 && i < ln-1 {
				o.R.Blobs[i] = o.R.Blobs[ln-1]
			}
			o.R.Blobs = o.R.Blobs[:ln-1]
			break
		}
	}

	return nil
}

func removeBlobsFromPropertiesSlice(o *Property, related []*Blob) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Properties {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Properties)
			if ln > 1 && i < ln-1 {
				rel.R.Properties[i] = rel.R.Properties[ln-1]
			}
			rel.R.Properties = rel.R.Properties[:ln-1]
			break
		}
	}
}

// Properties retrieves all the records using an executor.
func Properties(mods ...qm.QueryMod) propertyQuery {
	mods = append(mods, qm.From("\"properties\""), qmhelper.WhereIsNull("\"properties\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"properties\".*"})
	}

	return propertyQuery{q}
}

// FindProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProperty(exec boil.Executor, iD string, selectCols ...string) (*Property, error) {
	propertyObj := &Property{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"properties\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, propertyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from properties")
	}

	if err = propertyObj.doAfterSelectHooks(exec); err != nil {
		return propertyObj, err
	}

	return propertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Property) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no properties provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(propertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	propertyInsertCacheMut.RLock()
	cache, cached := propertyInsertCache[key]
	propertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			propertyAllColumns,
			propertyColumnsWithDefault,
			propertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(propertyType, propertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(propertyType, propertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into properties")
	}

	if !cached {
		propertyInsertCacheMut.Lock()
		propertyInsertCache[key] = cache
		propertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Property.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Property) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	propertyUpdateCacheMut.RLock()
	cache, cached := propertyUpdateCache[key]
	propertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			propertyAllColumns,
			propertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, propertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(propertyType, propertyMapping, append(wl, propertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for properties")
	}

	if !cached {
		propertyUpdateCacheMut.Lock()
		propertyUpdateCache[key] = cache
		propertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q propertyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PropertySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, propertyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in property slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all property")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Property) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no properties provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(propertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	propertyUpsertCacheMut.RLock()
	cache, cached := propertyUpsertCache[key]
	propertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			propertyAllColumns,
			propertyColumnsWithDefault,
			propertyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			propertyAllColumns,
			propertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(propertyPrimaryKeyColumns))
			copy(conflict, propertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(propertyType, propertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(propertyType, propertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert properties")
	}

	if !cached {
		propertyUpsertCacheMut.Lock()
		propertyUpsertCache[key] = cache
		propertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Property record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Property) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Property provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), propertyPrimaryKeyMapping)
		sql = "DELETE FROM \"properties\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"properties\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(propertyType, propertyMapping, append(wl, propertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for properties")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q propertyQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no propertyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PropertySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(propertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propertyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"properties\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, propertyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propertyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"properties\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, propertyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from property slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for properties")
	}

	if len(propertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Property) Reload(exec boil.Executor) error {
	ret, err := FindProperty(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PropertySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"properties\".* FROM \"properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, propertyPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PropertySlice")
	}

	*o = slice

	return nil
}

// PropertyExists checks if the Property row exists.
func PropertyExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"properties\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if properties exists")
	}

	return exists, nil
}

// Exists checks if the Property row exists.
func (o *Property) Exists(exec boil.Executor) (bool, error) {
	return PropertyExists(exec, o.ID)
}
