// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Agency is an object representing the database table.
type Agency struct {
	ID        string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Color     string      `boiler:"color" boil:"color" json:"color" toml:"color" yaml:"color"`
	LogoID    null.String `boiler:"logo_id" boil:"logo_id" json:"logo_id,omitempty" toml:"logo_id" yaml:"logo_id,omitempty"`
	ImageID   null.String `boiler:"image_id" boil:"image_id" json:"image_id,omitempty" toml:"image_id" yaml:"image_id,omitempty"`
	CreatedAt time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *agencyR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L agencyL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AgencyColumns = struct {
	ID        string
	Name      string
	Color     string
	LogoID    string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Color:     "color",
	LogoID:    "logo_id",
	ImageID:   "image_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var AgencyTableColumns = struct {
	ID        string
	Name      string
	Color     string
	LogoID    string
	ImageID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "agencies.id",
	Name:      "agencies.name",
	Color:     "agencies.color",
	LogoID:    "agencies.logo_id",
	ImageID:   "agencies.image_id",
	CreatedAt: "agencies.created_at",
	UpdatedAt: "agencies.updated_at",
	DeletedAt: "agencies.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AgencyWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	Color     whereHelperstring
	LogoID    whereHelpernull_String
	ImageID   whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"agencies\".\"id\""},
	Name:      whereHelperstring{field: "\"agencies\".\"name\""},
	Color:     whereHelperstring{field: "\"agencies\".\"color\""},
	LogoID:    whereHelpernull_String{field: "\"agencies\".\"logo_id\""},
	ImageID:   whereHelpernull_String{field: "\"agencies\".\"image_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"agencies\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"agencies\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"agencies\".\"deleted_at\""},
}

// AgencyRels is where relationship names are stored.
var AgencyRels = struct {
	Image      string
	Logo       string
	Managers   string
	Properties string
	Users      string
}{
	Image:      "Image",
	Logo:       "Logo",
	Managers:   "Managers",
	Properties: "Properties",
	Users:      "Users",
}

// agencyR is where relationships are stored.
type agencyR struct {
	Image      *Blob         `boiler:"Image" boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Logo       *Blob         `boiler:"Logo" boil:"Logo" json:"Logo" toml:"Logo" yaml:"Logo"`
	Managers   ManagerSlice  `boiler:"Managers" boil:"Managers" json:"Managers" toml:"Managers" yaml:"Managers"`
	Properties PropertySlice `boiler:"Properties" boil:"Properties" json:"Properties" toml:"Properties" yaml:"Properties"`
	Users      UserSlice     `boiler:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*agencyR) NewStruct() *agencyR {
	return &agencyR{}
}

func (r *agencyR) GetImage() *Blob {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *agencyR) GetLogo() *Blob {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *agencyR) GetManagers() ManagerSlice {
	if r == nil {
		return nil
	}
	return r.Managers
}

func (r *agencyR) GetProperties() PropertySlice {
	if r == nil {
		return nil
	}
	return r.Properties
}

func (r *agencyR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// agencyL is where Load methods for each relationship are stored.
type agencyL struct{}

var (
	agencyAllColumns            = []string{"id", "name", "color", "logo_id", "image_id", "created_at", "updated_at", "deleted_at"}
	agencyColumnsWithoutDefault = []string{"name", "color"}
	agencyColumnsWithDefault    = []string{"id", "logo_id", "image_id", "created_at", "updated_at", "deleted_at"}
	agencyPrimaryKeyColumns     = []string{"id"}
	agencyGeneratedColumns      = []string{}
)

type (
	// AgencySlice is an alias for a slice of pointers to Agency.
	// This should almost always be used instead of []Agency.
	AgencySlice []*Agency
	// AgencyHook is the signature for custom Agency hook methods
	AgencyHook func(boil.Executor, *Agency) error

	agencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	agencyType                 = reflect.TypeOf(&Agency{})
	agencyMapping              = queries.MakeStructMapping(agencyType)
	agencyPrimaryKeyMapping, _ = queries.BindMapping(agencyType, agencyMapping, agencyPrimaryKeyColumns)
	agencyInsertCacheMut       sync.RWMutex
	agencyInsertCache          = make(map[string]insertCache)
	agencyUpdateCacheMut       sync.RWMutex
	agencyUpdateCache          = make(map[string]updateCache)
	agencyUpsertCacheMut       sync.RWMutex
	agencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var agencyAfterSelectHooks []AgencyHook

var agencyBeforeInsertHooks []AgencyHook
var agencyAfterInsertHooks []AgencyHook

var agencyBeforeUpdateHooks []AgencyHook
var agencyAfterUpdateHooks []AgencyHook

var agencyBeforeDeleteHooks []AgencyHook
var agencyAfterDeleteHooks []AgencyHook

var agencyBeforeUpsertHooks []AgencyHook
var agencyAfterUpsertHooks []AgencyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Agency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Agency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Agency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Agency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Agency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Agency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Agency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Agency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Agency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range agencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAgencyHook registers your hook function for all future operations.
func AddAgencyHook(hookPoint boil.HookPoint, agencyHook AgencyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		agencyAfterSelectHooks = append(agencyAfterSelectHooks, agencyHook)
	case boil.BeforeInsertHook:
		agencyBeforeInsertHooks = append(agencyBeforeInsertHooks, agencyHook)
	case boil.AfterInsertHook:
		agencyAfterInsertHooks = append(agencyAfterInsertHooks, agencyHook)
	case boil.BeforeUpdateHook:
		agencyBeforeUpdateHooks = append(agencyBeforeUpdateHooks, agencyHook)
	case boil.AfterUpdateHook:
		agencyAfterUpdateHooks = append(agencyAfterUpdateHooks, agencyHook)
	case boil.BeforeDeleteHook:
		agencyBeforeDeleteHooks = append(agencyBeforeDeleteHooks, agencyHook)
	case boil.AfterDeleteHook:
		agencyAfterDeleteHooks = append(agencyAfterDeleteHooks, agencyHook)
	case boil.BeforeUpsertHook:
		agencyBeforeUpsertHooks = append(agencyBeforeUpsertHooks, agencyHook)
	case boil.AfterUpsertHook:
		agencyAfterUpsertHooks = append(agencyAfterUpsertHooks, agencyHook)
	}
}

// One returns a single agency record from the query.
func (q agencyQuery) One(exec boil.Executor) (*Agency, error) {
	o := &Agency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for agencies")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Agency records from the query.
func (q agencyQuery) All(exec boil.Executor) (AgencySlice, error) {
	var o []*Agency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Agency slice")
	}

	if len(agencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Agency records in the query.
func (q agencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count agencies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q agencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if agencies exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *Agency) Image(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Blobs(queryMods...)
}

// Logo pointed to by the foreign key.
func (o *Agency) Logo(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LogoID),
	}

	queryMods = append(queryMods, mods...)

	return Blobs(queryMods...)
}

// Managers retrieves all the manager's Managers with an executor.
func (o *Agency) Managers(mods ...qm.QueryMod) managerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"managers\".\"agency_id\"=?", o.ID),
	)

	return Managers(queryMods...)
}

// Properties retrieves all the property's Properties with an executor.
func (o *Agency) Properties(mods ...qm.QueryMod) propertyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"properties\".\"agency_id\"=?", o.ID),
	)

	return Properties(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Agency) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"agency_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (agencyL) LoadImage(e boil.Executor, singular bool, maybeAgency interface{}, mods queries.Applicator) error {
	var slice []*Agency
	var object *Agency

	if singular {
		var ok bool
		object, ok = maybeAgency.(*Agency)
		if !ok {
			object = new(Agency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAgency))
			}
		}
	} else {
		s, ok := maybeAgency.(*[]*Agency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAgency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agencyR{}
		}
		if !queries.IsNil(object.ImageID) {
			args = append(args, object.ImageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agencyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ImageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ImageID) {
				args = append(args, obj.ImageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
		qmhelper.WhereIsNull(`blobs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(blobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.ImageAgencies = append(foreign.R.ImageAgencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ImageID, foreign.ID) {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.ImageAgencies = append(foreign.R.ImageAgencies, local)
				break
			}
		}
	}

	return nil
}

// LoadLogo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (agencyL) LoadLogo(e boil.Executor, singular bool, maybeAgency interface{}, mods queries.Applicator) error {
	var slice []*Agency
	var object *Agency

	if singular {
		var ok bool
		object, ok = maybeAgency.(*Agency)
		if !ok {
			object = new(Agency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAgency))
			}
		}
	} else {
		s, ok := maybeAgency.(*[]*Agency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAgency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agencyR{}
		}
		if !queries.IsNil(object.LogoID) {
			args = append(args, object.LogoID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agencyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LogoID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LogoID) {
				args = append(args, obj.LogoID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
		qmhelper.WhereIsNull(`blobs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(blobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Logo = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.LogoAgencies = append(foreign.R.LogoAgencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LogoID, foreign.ID) {
				local.R.Logo = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.LogoAgencies = append(foreign.R.LogoAgencies, local)
				break
			}
		}
	}

	return nil
}

// LoadManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agencyL) LoadManagers(e boil.Executor, singular bool, maybeAgency interface{}, mods queries.Applicator) error {
	var slice []*Agency
	var object *Agency

	if singular {
		var ok bool
		object, ok = maybeAgency.(*Agency)
		if !ok {
			object = new(Agency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAgency))
			}
		}
	} else {
		s, ok := maybeAgency.(*[]*Agency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAgency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`managers`),
		qm.WhereIn(`managers.agency_id in ?`, args...),
		qmhelper.WhereIsNull(`managers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load managers")
	}

	var resultSlice []*Manager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice managers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on managers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for managers")
	}

	if len(managerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Managers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &managerR{}
			}
			foreign.R.Agency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgencyID {
				local.R.Managers = append(local.R.Managers, foreign)
				if foreign.R == nil {
					foreign.R = &managerR{}
				}
				foreign.R.Agency = local
				break
			}
		}
	}

	return nil
}

// LoadProperties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agencyL) LoadProperties(e boil.Executor, singular bool, maybeAgency interface{}, mods queries.Applicator) error {
	var slice []*Agency
	var object *Agency

	if singular {
		var ok bool
		object, ok = maybeAgency.(*Agency)
		if !ok {
			object = new(Agency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAgency))
			}
		}
	} else {
		s, ok := maybeAgency.(*[]*Agency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAgency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`properties`),
		qm.WhereIn(`properties.agency_id in ?`, args...),
		qmhelper.WhereIsNull(`properties.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load properties")
	}

	var resultSlice []*Property
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice properties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for properties")
	}

	if len(propertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Properties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &propertyR{}
			}
			foreign.R.Agency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgencyID {
				local.R.Properties = append(local.R.Properties, foreign)
				if foreign.R == nil {
					foreign.R = &propertyR{}
				}
				foreign.R.Agency = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agencyL) LoadUsers(e boil.Executor, singular bool, maybeAgency interface{}, mods queries.Applicator) error {
	var slice []*Agency
	var object *Agency

	if singular {
		var ok bool
		object, ok = maybeAgency.(*Agency)
		if !ok {
			object = new(Agency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAgency))
			}
		}
	} else {
		s, ok := maybeAgency.(*[]*Agency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAgency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAgency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agencyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.agency_id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Agency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AgencyID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Agency = local
				break
			}
		}
	}

	return nil
}

// SetImage of the agency to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageAgencies.
func (o *Agency) SetImage(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"agencies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, agencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ImageID, related.ID)
	if o.R == nil {
		o.R = &agencyR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &blobR{
			ImageAgencies: AgencySlice{o},
		}
	} else {
		related.R.ImageAgencies = append(related.R.ImageAgencies, o)
	}

	return nil
}

// RemoveImage relationship.
// Sets o.R.Image to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Agency) RemoveImage(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.ImageID, nil)
	if _, err = o.Update(exec, boil.Whitelist("image_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Image = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ImageAgencies {
		if queries.Equal(o.ImageID, ri.ImageID) {
			continue
		}

		ln := len(related.R.ImageAgencies)
		if ln > 1 && i < ln-1 {
			related.R.ImageAgencies[i] = related.R.ImageAgencies[ln-1]
		}
		related.R.ImageAgencies = related.R.ImageAgencies[:ln-1]
		break
	}
	return nil
}

// SetLogo of the agency to the related item.
// Sets o.R.Logo to related.
// Adds o to related.R.LogoAgencies.
func (o *Agency) SetLogo(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"agencies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"logo_id"}),
		strmangle.WhereClause("\"", "\"", 2, agencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LogoID, related.ID)
	if o.R == nil {
		o.R = &agencyR{
			Logo: related,
		}
	} else {
		o.R.Logo = related
	}

	if related.R == nil {
		related.R = &blobR{
			LogoAgencies: AgencySlice{o},
		}
	} else {
		related.R.LogoAgencies = append(related.R.LogoAgencies, o)
	}

	return nil
}

// RemoveLogo relationship.
// Sets o.R.Logo to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Agency) RemoveLogo(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.LogoID, nil)
	if _, err = o.Update(exec, boil.Whitelist("logo_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Logo = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LogoAgencies {
		if queries.Equal(o.LogoID, ri.LogoID) {
			continue
		}

		ln := len(related.R.LogoAgencies)
		if ln > 1 && i < ln-1 {
			related.R.LogoAgencies[i] = related.R.LogoAgencies[ln-1]
		}
		related.R.LogoAgencies = related.R.LogoAgencies[:ln-1]
		break
	}
	return nil
}

// AddManagers adds the given related objects to the existing relationships
// of the agency, optionally inserting them as new records.
// Appends related to o.R.Managers.
// Sets related.R.Agency appropriately.
func (o *Agency) AddManagers(exec boil.Executor, insert bool, related ...*Manager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"managers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agency_id"}),
				strmangle.WhereClause("\"", "\"", 2, managerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &agencyR{
			Managers: related,
		}
	} else {
		o.R.Managers = append(o.R.Managers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &managerR{
				Agency: o,
			}
		} else {
			rel.R.Agency = o
		}
	}
	return nil
}

// AddProperties adds the given related objects to the existing relationships
// of the agency, optionally inserting them as new records.
// Appends related to o.R.Properties.
// Sets related.R.Agency appropriately.
func (o *Agency) AddProperties(exec boil.Executor, insert bool, related ...*Property) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"properties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agency_id"}),
				strmangle.WhereClause("\"", "\"", 2, propertyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &agencyR{
			Properties: related,
		}
	} else {
		o.R.Properties = append(o.R.Properties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &propertyR{
				Agency: o,
			}
		} else {
			rel.R.Agency = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the agency, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Agency appropriately.
func (o *Agency) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AgencyID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agency_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AgencyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &agencyR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Agency: o,
			}
		} else {
			rel.R.Agency = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// agency replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Agency's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Agency's Users accordingly.
func (o *Agency) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "update \"users\" set \"agency_id\" = null where \"agency_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.AgencyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Agency = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Agency.
func (o *Agency) RemoveUsers(exec boil.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AgencyID, nil)
		if rel.R != nil {
			rel.R.Agency = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("agency_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// Agencies retrieves all the records using an executor.
func Agencies(mods ...qm.QueryMod) agencyQuery {
	mods = append(mods, qm.From("\"agencies\""), qmhelper.WhereIsNull("\"agencies\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"agencies\".*"})
	}

	return agencyQuery{q}
}

// FindAgency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAgency(exec boil.Executor, iD string, selectCols ...string) (*Agency, error) {
	agencyObj := &Agency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"agencies\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, agencyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from agencies")
	}

	if err = agencyObj.doAfterSelectHooks(exec); err != nil {
		return agencyObj, err
	}

	return agencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Agency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no agencies provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(agencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	agencyInsertCacheMut.RLock()
	cache, cached := agencyInsertCache[key]
	agencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			agencyAllColumns,
			agencyColumnsWithDefault,
			agencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(agencyType, agencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(agencyType, agencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"agencies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"agencies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into agencies")
	}

	if !cached {
		agencyInsertCacheMut.Lock()
		agencyInsertCache[key] = cache
		agencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Agency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Agency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	agencyUpdateCacheMut.RLock()
	cache, cached := agencyUpdateCache[key]
	agencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			agencyAllColumns,
			agencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update agencies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"agencies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, agencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(agencyType, agencyMapping, append(wl, agencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update agencies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for agencies")
	}

	if !cached {
		agencyUpdateCacheMut.Lock()
		agencyUpdateCache[key] = cache
		agencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q agencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for agencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for agencies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AgencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"agencies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, agencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in agency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all agency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Agency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no agencies provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(agencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	agencyUpsertCacheMut.RLock()
	cache, cached := agencyUpsertCache[key]
	agencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			agencyAllColumns,
			agencyColumnsWithDefault,
			agencyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			agencyAllColumns,
			agencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert agencies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(agencyPrimaryKeyColumns))
			copy(conflict, agencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"agencies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(agencyType, agencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(agencyType, agencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert agencies")
	}

	if !cached {
		agencyUpsertCacheMut.Lock()
		agencyUpsertCache[key] = cache
		agencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Agency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Agency) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Agency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), agencyPrimaryKeyMapping)
		sql = "DELETE FROM \"agencies\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"agencies\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(agencyType, agencyMapping, append(wl, agencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from agencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for agencies")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q agencyQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no agencyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from agencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for agencies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AgencySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(agencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agencyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"agencies\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, agencyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agencyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"agencies\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, agencyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from agency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for agencies")
	}

	if len(agencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Agency) Reload(exec boil.Executor) error {
	ret, err := FindAgency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AgencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AgencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"agencies\".* FROM \"agencies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, agencyPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in AgencySlice")
	}

	*o = slice

	return nil
}

// AgencyExists checks if the Agency row exists.
func AgencyExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"agencies\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if agencies exists")
	}

	return exists, nil
}

// Exists checks if the Agency row exists.
func (o *Agency) Exists(exec boil.Executor) (bool, error) {
	return AgencyExists(exec, o.ID)
}
