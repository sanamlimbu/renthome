// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserNotification is an object representing the database table.
type UserNotification struct {
	UserID         string    `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	NotificationID string    `boiler:"notification_id" boil:"notification_id" json:"notification_id" toml:"notification_id" yaml:"notification_id"`
	State          string    `boiler:"state" boil:"state" json:"state" toml:"state" yaml:"state"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userNotificationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userNotificationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserNotificationColumns = struct {
	UserID         string
	NotificationID string
	State          string
	CreatedAt      string
	UpdatedAt      string
}{
	UserID:         "user_id",
	NotificationID: "notification_id",
	State:          "state",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var UserNotificationTableColumns = struct {
	UserID         string
	NotificationID string
	State          string
	CreatedAt      string
	UpdatedAt      string
}{
	UserID:         "user_notifications.user_id",
	NotificationID: "user_notifications.notification_id",
	State:          "user_notifications.state",
	CreatedAt:      "user_notifications.created_at",
	UpdatedAt:      "user_notifications.updated_at",
}

// Generated where

var UserNotificationWhere = struct {
	UserID         whereHelperstring
	NotificationID whereHelperstring
	State          whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	UserID:         whereHelperstring{field: "\"user_notifications\".\"user_id\""},
	NotificationID: whereHelperstring{field: "\"user_notifications\".\"notification_id\""},
	State:          whereHelperstring{field: "\"user_notifications\".\"state\""},
	CreatedAt:      whereHelpertime_Time{field: "\"user_notifications\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"user_notifications\".\"updated_at\""},
}

// UserNotificationRels is where relationship names are stored.
var UserNotificationRels = struct {
	Notification string
	User         string
}{
	Notification: "Notification",
	User:         "User",
}

// userNotificationR is where relationships are stored.
type userNotificationR struct {
	Notification *Notification `boiler:"Notification" boil:"Notification" json:"Notification" toml:"Notification" yaml:"Notification"`
	User         *User         `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userNotificationR) NewStruct() *userNotificationR {
	return &userNotificationR{}
}

func (r *userNotificationR) GetNotification() *Notification {
	if r == nil {
		return nil
	}
	return r.Notification
}

func (r *userNotificationR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userNotificationL is where Load methods for each relationship are stored.
type userNotificationL struct{}

var (
	userNotificationAllColumns            = []string{"user_id", "notification_id", "state", "created_at", "updated_at"}
	userNotificationColumnsWithoutDefault = []string{"user_id", "notification_id"}
	userNotificationColumnsWithDefault    = []string{"state", "created_at", "updated_at"}
	userNotificationPrimaryKeyColumns     = []string{"user_id", "notification_id"}
	userNotificationGeneratedColumns      = []string{}
)

type (
	// UserNotificationSlice is an alias for a slice of pointers to UserNotification.
	// This should almost always be used instead of []UserNotification.
	UserNotificationSlice []*UserNotification
	// UserNotificationHook is the signature for custom UserNotification hook methods
	UserNotificationHook func(boil.Executor, *UserNotification) error

	userNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userNotificationType                 = reflect.TypeOf(&UserNotification{})
	userNotificationMapping              = queries.MakeStructMapping(userNotificationType)
	userNotificationPrimaryKeyMapping, _ = queries.BindMapping(userNotificationType, userNotificationMapping, userNotificationPrimaryKeyColumns)
	userNotificationInsertCacheMut       sync.RWMutex
	userNotificationInsertCache          = make(map[string]insertCache)
	userNotificationUpdateCacheMut       sync.RWMutex
	userNotificationUpdateCache          = make(map[string]updateCache)
	userNotificationUpsertCacheMut       sync.RWMutex
	userNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userNotificationAfterSelectHooks []UserNotificationHook

var userNotificationBeforeInsertHooks []UserNotificationHook
var userNotificationAfterInsertHooks []UserNotificationHook

var userNotificationBeforeUpdateHooks []UserNotificationHook
var userNotificationAfterUpdateHooks []UserNotificationHook

var userNotificationBeforeDeleteHooks []UserNotificationHook
var userNotificationAfterDeleteHooks []UserNotificationHook

var userNotificationBeforeUpsertHooks []UserNotificationHook
var userNotificationAfterUpsertHooks []UserNotificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserNotification) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserNotification) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserNotification) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserNotification) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserNotification) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserNotification) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserNotification) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserNotification) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserNotification) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userNotificationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserNotificationHook registers your hook function for all future operations.
func AddUserNotificationHook(hookPoint boil.HookPoint, userNotificationHook UserNotificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userNotificationAfterSelectHooks = append(userNotificationAfterSelectHooks, userNotificationHook)
	case boil.BeforeInsertHook:
		userNotificationBeforeInsertHooks = append(userNotificationBeforeInsertHooks, userNotificationHook)
	case boil.AfterInsertHook:
		userNotificationAfterInsertHooks = append(userNotificationAfterInsertHooks, userNotificationHook)
	case boil.BeforeUpdateHook:
		userNotificationBeforeUpdateHooks = append(userNotificationBeforeUpdateHooks, userNotificationHook)
	case boil.AfterUpdateHook:
		userNotificationAfterUpdateHooks = append(userNotificationAfterUpdateHooks, userNotificationHook)
	case boil.BeforeDeleteHook:
		userNotificationBeforeDeleteHooks = append(userNotificationBeforeDeleteHooks, userNotificationHook)
	case boil.AfterDeleteHook:
		userNotificationAfterDeleteHooks = append(userNotificationAfterDeleteHooks, userNotificationHook)
	case boil.BeforeUpsertHook:
		userNotificationBeforeUpsertHooks = append(userNotificationBeforeUpsertHooks, userNotificationHook)
	case boil.AfterUpsertHook:
		userNotificationAfterUpsertHooks = append(userNotificationAfterUpsertHooks, userNotificationHook)
	}
}

// One returns a single userNotification record from the query.
func (q userNotificationQuery) One(exec boil.Executor) (*UserNotification, error) {
	o := &UserNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_notifications")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserNotification records from the query.
func (q userNotificationQuery) All(exec boil.Executor) (UserNotificationSlice, error) {
	var o []*UserNotification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserNotification slice")
	}

	if len(userNotificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserNotification records in the query.
func (q userNotificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_notifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userNotificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_notifications exists")
	}

	return count > 0, nil
}

// Notification pointed to by the foreign key.
func (o *UserNotification) Notification(mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NotificationID),
	}

	queryMods = append(queryMods, mods...)

	return Notifications(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserNotification) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadNotification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userNotificationL) LoadNotification(e boil.Executor, singular bool, maybeUserNotification interface{}, mods queries.Applicator) error {
	var slice []*UserNotification
	var object *UserNotification

	if singular {
		var ok bool
		object, ok = maybeUserNotification.(*UserNotification)
		if !ok {
			object = new(UserNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserNotification))
			}
		}
	} else {
		s, ok := maybeUserNotification.(*[]*UserNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserNotification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userNotificationR{}
		}
		args = append(args, object.NotificationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userNotificationR{}
			}

			for _, a := range args {
				if a == obj.NotificationID {
					continue Outer
				}
			}

			args = append(args, obj.NotificationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notifications`),
		qm.WhereIn(`notifications.id in ?`, args...),
		qmhelper.WhereIsNull(`notifications.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notification")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notifications")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Notification = foreign
		if foreign.R == nil {
			foreign.R = &notificationR{}
		}
		foreign.R.UserNotifications = append(foreign.R.UserNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NotificationID == foreign.ID {
				local.R.Notification = foreign
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.UserNotifications = append(foreign.R.UserNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userNotificationL) LoadUser(e boil.Executor, singular bool, maybeUserNotification interface{}, mods queries.Applicator) error {
	var slice []*UserNotification
	var object *UserNotification

	if singular {
		var ok bool
		object, ok = maybeUserNotification.(*UserNotification)
		if !ok {
			object = new(UserNotification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserNotification))
			}
		}
	} else {
		s, ok := maybeUserNotification.(*[]*UserNotification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserNotification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserNotification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userNotificationR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userNotificationR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserNotifications = append(foreign.R.UserNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserNotifications = append(foreign.R.UserNotifications, local)
				break
			}
		}
	}

	return nil
}

// SetNotification of the userNotification to the related item.
// Sets o.R.Notification to related.
// Adds o to related.R.UserNotifications.
func (o *UserNotification) SetNotification(exec boil.Executor, insert bool, related *Notification) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notification_id"}),
		strmangle.WhereClause("\"", "\"", 2, userNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.NotificationID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NotificationID = related.ID
	if o.R == nil {
		o.R = &userNotificationR{
			Notification: related,
		}
	} else {
		o.R.Notification = related
	}

	if related.R == nil {
		related.R = &notificationR{
			UserNotifications: UserNotificationSlice{o},
		}
	} else {
		related.R.UserNotifications = append(related.R.UserNotifications, o)
	}

	return nil
}

// SetUser of the userNotification to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotifications.
func (o *UserNotification) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.NotificationID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userNotificationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserNotifications: UserNotificationSlice{o},
		}
	} else {
		related.R.UserNotifications = append(related.R.UserNotifications, o)
	}

	return nil
}

// UserNotifications retrieves all the records using an executor.
func UserNotifications(mods ...qm.QueryMod) userNotificationQuery {
	mods = append(mods, qm.From("\"user_notifications\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_notifications\".*"})
	}

	return userNotificationQuery{q}
}

// FindUserNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserNotification(exec boil.Executor, userID string, notificationID string, selectCols ...string) (*UserNotification, error) {
	userNotificationObj := &UserNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_notifications\" where \"user_id\"=$1 AND \"notification_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, notificationID)

	err := q.Bind(nil, exec, userNotificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_notifications")
	}

	if err = userNotificationObj.doAfterSelectHooks(exec); err != nil {
		return userNotificationObj, err
	}

	return userNotificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserNotification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_notifications provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userNotificationInsertCacheMut.RLock()
	cache, cached := userNotificationInsertCache[key]
	userNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userNotificationAllColumns,
			userNotificationColumnsWithDefault,
			userNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userNotificationType, userNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userNotificationType, userNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_notifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_notifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_notifications")
	}

	if !cached {
		userNotificationInsertCacheMut.Lock()
		userNotificationInsertCache[key] = cache
		userNotificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserNotification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userNotificationUpdateCacheMut.RLock()
	cache, cached := userNotificationUpdateCache[key]
	userNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userNotificationAllColumns,
			userNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_notifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userNotificationType, userNotificationMapping, append(wl, userNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_notifications")
	}

	if !cached {
		userNotificationUpdateCacheMut.Lock()
		userNotificationUpdateCache[key] = cache
		userNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userNotificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_notifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserNotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userNotificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userNotification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserNotification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_notifications provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userNotificationUpsertCacheMut.RLock()
	cache, cached := userNotificationUpsertCache[key]
	userNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userNotificationAllColumns,
			userNotificationColumnsWithDefault,
			userNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userNotificationAllColumns,
			userNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_notifications, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userNotificationPrimaryKeyColumns))
			copy(conflict, userNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_notifications\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userNotificationType, userNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userNotificationType, userNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_notifications")
	}

	if !cached {
		userNotificationUpsertCacheMut.Lock()
		userNotificationUpsertCache[key] = cache
		userNotificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserNotification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserNotification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"user_notifications\" WHERE \"user_id\"=$1 AND \"notification_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_notifications")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userNotificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserNotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userNotificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userNotificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_notifications")
	}

	if len(userNotificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserNotification) Reload(exec boil.Executor) error {
	ret, err := FindUserNotification(exec, o.UserID, o.NotificationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserNotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_notifications\".* FROM \"user_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserNotificationSlice")
	}

	*o = slice

	return nil
}

// UserNotificationExists checks if the UserNotification row exists.
func UserNotificationExists(exec boil.Executor, userID string, notificationID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_notifications\" where \"user_id\"=$1 AND \"notification_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID, notificationID)
	}
	row := exec.QueryRow(sql, userID, notificationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_notifications exists")
	}

	return exists, nil
}

// Exists checks if the UserNotification row exists.
func (o *UserNotification) Exists(exec boil.Executor) (bool, error) {
	return UserNotificationExists(exec, o.UserID, o.NotificationID)
}
